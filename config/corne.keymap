/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        layer_hold_tap: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Hold and Tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
        };

        tap_layer_hold_kp: tap_layer_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Tap Layer Hold Kp";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            quick-tap-ms = <0>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        idle_hold_tap_kp: idle_hold_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Idle Hold Tap Key";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
        };

        idle_hold_layer_tap_kp: idle_hold_layer_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Idle Hold Layer MO Tap Key Press";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
            retro-tap;
            quick-tap-ms = <100>;
        };

        tap_tap_copy_paste: tap_tap_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap tap copy paste";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        tap_tap_shift_caps: tap_tap_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap tap shift caps";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };

        thumb_hold_kp: thumb_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Thumb hold tap";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
            retro-tap;
        };

        num_hold: num_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold num keys and kp";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 6 7 8 9 10 0 11>;
            retro-tap;
            quick-tap-ms = <200>;
        };

        num_sk: num_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "Num row sticky key";
            bindings = <&sl>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 6 7 8 9 10 0 11 37>;
            retro-tap;
        };

        back_layer: back_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "Back layer";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            retro-tap;
            quick-tap-ms = <125>;
        };

        arrow: arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROW";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            retro-tap;
            quick-tap-ms = <125>;
            hold-trigger-key-positions = <33 22 34 35>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ArrowCombo {
            bindings = <&tog 1>;
            key-positions = <35 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt GRAVE TAB                   &kp Q  &kp W  &kp E           &kp R                 &kp T                              &kp Y                           &kp U               &kp I                         &kp O                                   &kp P                &back_layer 4 BACKSPACE
&idle_hold_tap_kp LC(C) ESCAPE  &kp A  &kp S  &kp D           &kp F                 &kp G                              &kp H                           &kp J               &kp K                         &kp L                                   &mt MINUS SEMICOLON  &mt EQUAL SQT
&tap_tap_copy_paste             &kp Z  &kp X  &kp C           &kp V                 &kp B                              &kp N                           &kp M               &idle_hold_tap_kp LBKT COMMA  &idle_hold_tap_kp RIGHT_BRACKET PERIOD  &mt BACKSLASH SLASH  &arrow 1 RIGHT
                                              &lt 2 UP_ARROW  &num_sk 2 LEFT_SHIFT  &thumb_hold_kp LEFT_SHIFT SPACE    &thumb_hold_kp RIGHT_GUI SPACE  &num_hold 3 RETURN  &lt 3 DOWN_ARROW
            >;
        };

        Navigation {
            bindings = <
&trans  &to 0  &to 0  &to 0   &to 0   &to 0     &to 0   &to 0   &to 0   &to 0           &to 0           &trans
&trans  &to 0  &to 0  &to 0   &to 0   &to 0     &to 0   &to 0   &to 0   &to 0           &kp UP_ARROW    &to 0
&trans  &to 0  &to 0  &to 0   &to 0   &to 0     &to 0   &to 0   &to 0   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |  b   |  r   |  u   |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5         &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp BSPC
&kp LC(C)     &trans  &trans  &trans  &trans  &kp LG(TAB)    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&kp LEFT_ALT  &trans  &trans  &trans  &trans  &kp LG(Z)      &trans    &trans    &trans  &trans     &trans  &trans
                              &to 3   &to 0   &trans         &trans    &trans    &to 0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp EXCL  &kp AT  &kp HASH   &kp DLLR          &kp PRCNT             &kp CARET  &kp AMPS       &kp ASTRK       &kp LPAR            &kp RPAR               &kp BSPC
&trans        &trans    &trans  &kp GRAVE  &kp BACKSLASH     &kp PLUS              &kp EQUAL  &kp SEMI       &kp RS(SEMI)    &kp RS(LEFT_BRACE)  &kp RS(RIGHT_BRACKET)  &kp QUESTION
&kp LEFT_ALT  &trans    &trans  &kp TILDE  &kp PIPE          &kp LS(UNDERSCORE)    &kp MINUS  &kp RS(COMMA)  &kp RS(PERIOD)  &kp LEFT_BRACKET    &kp RIGHT_BRACKET      &kp SLASH
                                &trans     &sk LEFT_CONTROL  &trans                &trans     &trans         &to 0
            >;
        };

        fn_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 0    &bt BT_CLR  &trans            &trans  &trans          &trans             &soft_off
&bootloader     &trans        &trans        &trans        &trans          &trans          &trans      &trans            &trans  &trans          &kp K_VOLUME_UP    &bootloader
&studio_unlock  &trans        &trans        &trans        &trans          &sys_reset      &sys_reset  &trans            &trans  &kp K_PREVIOUS  &kp K_VOLUME_DOWN  &kp K_NEXT
                                            &trans        &studio_unlock  &trans          &kp K_MUTE  &kp K_PLAY_PAUSE  &trans
            >;
        };
    };
};
