/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        layer_hold_tap: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Hold and Tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
        };

        tap_layer_hold_kp: tap_layer_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Tap Layer Hold Kp";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            quick-tap-ms = <0>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        idle_hold_tap_kp: idle_hold_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Idle Hold Tap Key";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
        };

        idle_hold_layer_tap_kp: idle_hold_layer_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Idle Hold Layer MO Tap Key Press";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
            retro-tap;
            quick-tap-ms = <100>;
        };

        tap_tap_copy_paste: tap_tap_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap tap copy paste";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        tap_tap_shift_caps: tap_tap_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap tap shift caps";
            #binding-cells = <0>;
            bindings = <&left_homerow LSHFT TAB>, <&caps_word>;
        };

        thumb_hold_kp: thumb_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "Thumb hold tap";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            quick-tap-ms = <200>;
        };

        left_homerow: left_homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Homerow";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 22 21 19 20 18 30 31 32 33 34 35 23 11>;
            hold-trigger-on-release;
        };

        right_homerow: right_homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "Right homerow";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 29 28 27 26 25 24>;
            hold-trigger-on-release;
        };

        escape: escape {
            compatible = "zmk,behavior-tap-dance";
            label = "Escaper";
            #binding-cells = <0>;
            bindings = <&mt GRAVE ESCAPE>, <&kp LC(C)>;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "Thumb layer";
            bindings = <&sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
        };

        autoshift: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            flavor = "tap-preferred";
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP HOME END>;
            ignore-modifiers;
        };
    };

    combos {
        compatible = "zmk,combos";

        ArrowCombo {
            bindings = <&tog 4>;
            key-positions = <38 39>;
        };

        thumb_caps {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        command_toggle {
            bindings = <&kt RIGHT_GUI>;
            key-positions = <37 40>;
        };

        right {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <34 35>;
        };

        left {
            bindings = <&kp LEFT>;
            key-positions = <24 25>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <0 1>;
        };

        up {
            bindings = <&kp UP_ARROW>;
            key-positions = <36 37>;
        };

        down {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&escape         &kp Q  &kp W                     &kp E                         &kp R                    &kp T        &kp Y      &kp U                            &kp I                           &kp O                                   &kp P                       &kp BACKSPACE
&sl 3           &kp A  &left_homerow LEFT_ALT S  &left_homerow LEFT_CONTROL D  &left_homerow LGUI F     &kp G        &kp H      &right_homerow RIGHT_GUI J       &right_homerow RIGHT_CONTROL K  &right_homerow RIGHT_ALT L              &autoshift COLON SEMICOLON  &autoshift DOUBLE_QUOTES APOSTROPHE
&sk LEFT_SHIFT  &kp Z  &kp X                     &kp C                         &kp V                    &kp B        &kp N      &kp M                            &autoshift LBKT COMMA           &idle_hold_tap_kp RIGHT_BRACKET PERIOD  &autoshift QUESTION SLASH   &sk RIGHT_SHIFT
                                                 &num_word 2                   &thumb_hold_kp LGUI TAB  &kp SPACE    &kp SPACE  &thumb_hold_kp RIGHT_GUI RETURN  &nav_word 1
            >;
        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &kp UP_ARROW    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT
                        &trans  &trans  &trans    &trans  &trans  &to 0
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |  b   |  r   |  u   |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6         &kp N7    &kp N8                   &kp N9          &kp N0          &kp RC(D)
&trans  &trans  &trans  &trans  &trans  &trans    &kp RG(TAB)    &kp HOME  &kp RA(UP_ARROW)         &kp RA(LEFT)    &kp UP_ARROW    &kp RA(RIGHT_ARROW)
&to 0   &trans  &trans  &trans  &trans  &trans    &kp RG(GRAVE)  &kp END   &kp RA(DOWN_ARROW)       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT
                        &trans  &trans  &trans    &trans         &to 2     &mt RIGHT_CONTROL RIGHT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL   &kp AT     &kp HASH           &kp DLLR        &kp PRCNT          &kp CARET      &kp AMPS   &kp ASTRK      &kp LPAR          &kp RPAR          &kp DELETE
&trans     &kp CARET  &kp AMPS   &kp STAR           &kp LPAR        &kp RPAR           &kp RS(MINUS)  &kp SEMI   &kp SLASH      &kp BACKSLASH     &kp RS(QUESTION)  &kp LS(SQT)
&to 0      &kp PLUS   &kp EQUAL  &kp PIPE           &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp MINUS      &kp COLON  &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                                 &mt LEFT_ALT LEFT  &to 3           &caps_word         &trans         &trans     &trans
            >;
        };

        fn_layer {
            bindings = <
&bt BT_NXT      &trans  &trans  &trans  &trans          &trans         &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4       &bt BT_CLR
&trans          &trans  &trans  &trans  &trans          &bootloader    &bootloader   &trans            &trans        &trans          &kp K_VOLUME_UP    &trans
&studio_unlock  &trans  &trans  &trans  &trans          &sys_reset     &sys_reset    &trans            &trans        &kp K_PREVIOUS  &kp K_VOLUME_DOWN  &kp K_FORWARD
                                &trans  &studio_unlock  &trans         &kp K_MUTE    &kp K_PLAY_PAUSE  &trans
            >;
        };
    };
};
