/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        layer_hold_tap: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD_TAP";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            hold-while-undecided-linger;
        };

        tap_layer_hold_kp: tap_layer_hold_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_LAYER_HOLD_KP";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            quick-tap-ms = <0>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        idle_hold_tap_kp: idle_hold_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "IDLE_HOLD_TAP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };

        idle_hold_layer_tap_kp: idle_hold_layer_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "IDLE_HOLD_LAYER_TAP_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };

        tap_tap_copy_paste: tap_tap_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_COPY_PASTE";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        tap_tap_shift_caps: tap_tap_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_TAP_SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&lt 3 TAB            &kp Q  &kp W  &kp E                &kp R                &kp T                              &kp Y                              &kp U                             &kp I                &kp O           &kp P           &kp BSPC
&gresc               &kp A  &kp S  &kp D                &kp F                &kp G                              &kp H                              &kp J                             &kp K                &kp L           &kp UP_ARROW    &mt RS(SQT) SQT
&tap_tap_shift_caps  &kp Z  &kp X  &kp C                &kp V                &kp B                              &kp N                              &kp M                             &mt COMMA PERIOD     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
                                   &tap_tap_copy_paste  &layer_hold_tap 1 1  &idle_hold_layer_tap_kp 2 SPACE    &idle_hold_tap_kp RIGHT_GUI SPACE  &idle_hold_layer_tap_kp 2 RETURN  &tap_tap_shift_caps
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |  b   |  r   |  u   |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5         &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp BSPC
&kp LC(C)     &trans  &trans  &trans  &trans  &kp LG(TAB)    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&kp LEFT_ALT  &trans  &trans  &trans  &trans  &kp LG(Z)      &trans    &trans    &trans  &trans     &trans  &trans
                              &trans  &to 0   &trans         &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH      &kp DLLR          &kp PRCNT             &kp CARET  &kp AMPS       &kp ASTRK       &kp LPAR            &kp RPAR               &kp BSPC
&trans     &trans    &trans  &kp GRAVE     &kp BACKSLASH     &kp PLUS              &kp EQUAL  &kp SEMI       &kp RS(SEMI)    &kp RS(LEFT_BRACE)  &kp RS(RIGHT_BRACKET)  &kp QUESTION
&trans     &trans    &trans  &kp TILDE     &kp PIPE          &kp LS(UNDERSCORE)    &kp MINUS  &kp RS(COMMA)  &kp RS(PERIOD)  &kp LEFT_BRACKET    &kp RIGHT_BRACKET      &kp SLASH
                             &sk LEFT_ALT  &sk LEFT_CONTROL  &trans                &trans     &trans         &trans
            >;
        };

        fn_layer {
            bindings = <
&trans          &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 0    &bt BT_CLR  &trans            &trans  &trans          &trans             &soft_off
&bootloader     &trans        &trans        &trans        &trans          &trans          &trans      &trans            &trans  &trans          &kp K_VOLUME_UP    &bootloader
&studio_unlock  &trans        &trans        &trans        &trans          &sys_reset      &sys_reset  &trans            &trans  &kp K_PREVIOUS  &kp K_VOLUME_DOWN  &kp K_NEXT
                                            &trans        &studio_unlock  &trans          &trans      &kp K_PLAY_PAUSE  &trans
            >;
        };
    };
};
